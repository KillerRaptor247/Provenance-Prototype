{"version":3,"file":"trrack.cjs.production.min.js","sources":["../src/Types/Nodes.ts","../src/Utils/DeepCopy.ts","../src/Utils/defaultDeserializer.ts","../src/Utils/defaultSerializer.ts","../src/Utils/generateTimeStamp.ts","../src/Utils/generateUUID.ts","../src/Provenance/ProvenanceGraphFunction.ts","../src/Utils/Differ.ts","../src/Provenance/ProvenanceCreator.ts","../src/Provenance/ActionCreator.ts"],"sourcesContent":["/* eslint-disable no-shadow */\nimport { applyChange, Diff } from 'deep-diff';\nimport { toJS } from 'mobx';\nimport deepCopy from '../Utils/DeepCopy';\nimport { ActionType } from './Action';\nimport { ProvenanceGraph } from './ProvenanceGraph';\nimport { JsonValue } from './Serializers';\n\nexport type DiffExport<L, R = L> = Diff<L, R>;\n\nexport type NodeID = string;\n\nexport type Meta = { [key: string]: any };\n\nexport type NodeMetadata<S> = {\n  createdOn?: number;\n  eventType: S | 'Root';\n} & Meta;\n\ntype BaseArtifact = {\n  timestamp: number;\n};\n\nexport type Annotation = BaseArtifact & {\n  annotation: string;\n};\n\nexport type Artifact<A> = BaseArtifact & {\n  artifact: A;\n};\n\nexport type Artifacts<A> = {\n  annotations: Annotation[];\n  customArtifacts: Artifact<A>[];\n};\n\nexport interface BaseNode<S> {\n  id: NodeID;\n  label: string;\n  metadata: NodeMetadata<S>;\n  children: NodeID[];\n  actionType: ActionType;\n  bookmarked: boolean;\n}\n\nexport interface RootNode<S> extends BaseNode<S> {\n  state: JsonValue;\n}\n\nexport interface ChildNode<S, A> extends BaseNode<S> {\n  parent: NodeID;\n  artifacts: Artifacts<A>;\n}\n\nexport interface StateNode<S, A> extends RootNode<S>, ChildNode<S, A> {}\n\nexport interface DiffNode<S, A> extends ChildNode<S, A> {\n  diffs: Diff<JsonValue>[];\n  lastStateNode: NodeID;\n}\n\nexport type ProvenanceNode<S, A> = RootNode<S> | StateNode<S, A> | DiffNode<S, A>;\n\nexport type Nodes<S, A> = { [key: string]: ProvenanceNode<S, A> };\n\nexport type CurrentNode<S, A> = ProvenanceNode<S, A>;\n\n/**\n * Function for checking if a node is a state node.\n * @template T Represents the given state of an application as defined in initProvenance.\n * @template S Represents the given event types in your application.\n * Event types are used to differentiate between different actions that create nodes.\n * @template A Represents the given \"extra\" type for storing metadata.\n * Extra is a way to store customized metadata.\n * @param _opts: Given node to check if it is a state node.\n */\nexport function isStateNode<S, A>(node: ProvenanceNode<S, A>): node is StateNode<S, A> {\n  return 'parent' in node && 'state' in node;\n}\n\n/**\n * Function for checking if a node is a diff node.\n * @template T Represents the given state of an application as defined in initProvenance.\n * @template S Represents the given event types in your application.\n * Event types are used to differentiate between different actions that create nodes.\n * @template A Represents the given \"extra\" type for storing metadata.\n * Extra is a way to store customized metadata.\n * @param _opts: Given node to check if it is a diff node.\n */\nexport function isDiffNode<S, A>(node: ProvenanceNode<S, A>): node is DiffNode<S, A> {\n  return 'diffs' in node;\n}\n\n/**\n * Function for checking if a node is a child node.\n * @template T Represents the given state of an application as defined in initProvenance.\n * @template S Represents the given event types in your application.\n * Event types are used to differentiate between different actions that create nodes.\n * @template A Represents the given \"extra\" type for storing metadata.\n *  Extra is a way to store customized metadata.\n * @param _opts: Given node to check if it is a child node.\n */\nexport function isChildNode<S, A>(\n  node: ProvenanceNode<S, A>,\n): node is DiffNode<S, A> | StateNode<S, A> {\n  return 'parent' in node;\n}\n\n/**\n * Function for checking if a node is the root node.\n * @template T Represents the given state of an application as defined in initProvenance.\n * @template S Represents the given event types in your application.\n * Event types are used to differentiate between different actions that create nodes.\n * @template A Represents the given \"extra\" type for storing metadata.\n * Extra is a way to store customized metadata.\n * @param _opts: Given node to check if it is root.\n */\nexport function isRootNode<S, A>(node: ProvenanceNode<S, A>): node is RootNode<S> {\n  return node.label === 'Root';\n}\n\n/**\n`* Retrieve the state of a node. `\n * @template T Represents the given state of an application as defined in initProvenance.\n * @template S Represents the given event types in your application.\n * Event types are used to differentiate between different actions that create nodes.\n * @template A Represents the given \"extra\" type for storing metadata.\n * Extra is a way to store customized metadata.\n * @param graph: Provenance Graph which we are searching for node in\n * @param _opts: Node which we want the state of\n */\nexport function getState<S, A>(\n  graph: ProvenanceGraph<S, A>,\n  node: ProvenanceNode<S, A>,\n): JsonValue {\n  if (isRootNode(node) || isStateNode(node)) {\n    return toJS(node.state);\n  }\n\n  // eslint-disable-next-line no-underscore-dangle\n  const _state = toJS((graph.nodes[node.lastStateNode] as StateNode<S, A>).state);\n\n  const state = deepCopy(_state);\n\n  // what is this for?\n  node.diffs.forEach((diff) => {\n    applyChange(state, null, diff);\n  });\n\n  return state;\n}\n","/* eslint-disable no-shadow */\n// TODO:: Fix typing, target shouldnt be of type T.\n\n// eslint-disable-next-line no-unused-vars\nexport default function deepCopy<T>(target: T): T {\n  return JSON.parse(JSON.stringify(target));\n}\n","import { JsonValue } from '../Types/Serializers';\n\nfunction defaultDeserializer<T>(o: JsonValue): T {\n  const str = JSON.stringify(o);\n  const obj = JSON.parse(str, (_, val) => {\n    if (!val) return val;\n\n    if (val.type && val.type === 'Set') {\n      return new Set(val.arr);\n    }\n    if (val.type && val.type === 'Map') {\n      return new Map(Object.entries(val.obj));\n    }\n    return val;\n  });\n\n  return obj;\n}\n\nexport default defaultDeserializer;\n","import { toJS } from 'mobx';\nimport { JsonValue } from '../Types/Serializers';\n\nfunction defaultSerializer<T>(obj: T): JsonValue {\n  if (!obj) return {};\n\n  const str = JSON.stringify(toJS(obj), (_, val) => {\n    if (val instanceof Set) {\n      return {\n        type: 'Set',\n        arr: Array.from(val),\n      };\n    }\n    if (val instanceof Map) {\n      return {\n        type: 'Map',\n        obj: Object.fromEntries(val),\n      };\n    }\n    return val;\n  });\n\n  return JSON.parse(str);\n}\n\nexport default defaultSerializer;\n","export default function generateTimeStamp(): number {\n  return new Date().getTime();\n}\n","/* eslint-disable no-bitwise */\nexport default function generateUUID(): string {\n  let d = new Date().getTime();\n\n  d += new Date().valueOf();\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n}\n","/* eslint-disable no-shadow */\nimport { Diff } from 'deep-diff';\nimport { action } from 'mobx';\nimport { ActionType, ApplyObject } from '../Types/Action';\nimport {\n  DiffNode,\n  getState,\n  isChildNode,\n  isDiffNode,\n  Meta,\n  NodeID,\n  RootNode,\n  StateNode,\n} from '../Types/Nodes';\nimport { ProvenanceGraph } from '../Types/ProvenanceGraph';\nimport { JsonValue, Serializer } from '../Types/Serializers';\nimport differ from '../Utils/Differ';\nimport generateTimeStamp from '../Utils/generateTimeStamp';\nimport generateUUID from '../Utils/generateUUID';\n\nexport function createProvenanceGraph<S, A>(state: JsonValue): ProvenanceGraph<S, A> {\n  const root: RootNode<S> = {\n    id: generateUUID(),\n    label: 'Root',\n    metadata: {\n      createdOn: generateTimeStamp(),\n      eventType: 'Root',\n    },\n    children: [],\n    state,\n    actionType: 'Regular',\n    bookmarked: false,\n  };\n\n  const graph: ProvenanceGraph<S, A> = {\n    nodes: {\n      [root.id]: root,\n    },\n    root: root.id,\n    current: root.id,\n  };\n\n  return graph;\n}\n\nfunction createNewStateNode<S, A>(\n  parent: NodeID,\n  state: JsonValue,\n  label: string,\n  actionType: ActionType,\n  eventType: S,\n  meta: Meta,\n): StateNode<S, A> {\n  return {\n    id: generateUUID(),\n    label,\n    metadata: {\n      createdOn: generateTimeStamp(),\n      eventType,\n      ...meta,\n    },\n    artifacts: {\n      annotations: [],\n      customArtifacts: [],\n    },\n    parent,\n    children: [],\n    state,\n    actionType,\n    bookmarked: false,\n  };\n}\n\nfunction createNewDiffNode<S, A>(\n  parent: NodeID,\n  label: string,\n  diffs: Diff<JsonValue>[],\n  actionType: ActionType,\n  previousStateId: NodeID,\n  eventType: S,\n  meta: Meta,\n): DiffNode<S, A> {\n  return {\n    id: generateUUID(),\n    label,\n    metadata: {\n      createdOn: generateTimeStamp(),\n      eventType,\n      ...meta,\n    },\n    artifacts: {\n      annotations: [],\n      customArtifacts: [],\n    },\n    parent,\n    children: [],\n    lastStateNode: previousStateId,\n    diffs,\n    actionType,\n    bookmarked: false,\n  };\n}\n\n// export const updateMobxObservable = action(<T>(oldObject: T, newObject: T) => {\n//   Object.keys(oldObject).forEach((k) => {\n//     const key: Extract<keyof T, string> = k as any;\n//     const oldValue = oldObject[key];\n//     const newValue = newObject[key];\n//     if (newValue !== oldValue) {\n//       let val = newObject[key];\n//       val = (typeof val).toString() === 'object' ? observable(val) : val;\n//       oldObject[key] = val;\n//     }\n//   });\n// });\n\nexport const goToNode = action(<S, A>(graph: ProvenanceGraph<S, A>, id: NodeID) => {\n  const newCurrentNode = graph.nodes[id];\n  if (!newCurrentNode) throw new Error(`Node with id: ${id} does not exist`);\n  graph.current = newCurrentNode.id;\n});\n\nexport const applyActionFunction = action(\n  <T, S, A>(\n    _graph: ProvenanceGraph<S, A>,\n    actionFn: ApplyObject<T, S>,\n    currentState: T,\n    // eslint-disable-next-line no-unused-vars\n    serialize: Serializer<T>,\n    customLabel?: string,\n  ) => {\n    const graph = _graph;\n\n    const { current: currentId } = graph;\n    const currentNode = graph.nodes[currentId];\n    let previousState: JsonValue | null = null;\n    let previousStateID: NodeID | null = null;\n\n    if (isDiffNode(currentNode)) {\n      previousState = getState(graph, graph.nodes[currentNode.lastStateNode]);\n      previousStateID = currentNode.lastStateNode;\n    } else {\n      previousState = getState(graph, currentNode);\n      previousStateID = currentNode.id;\n    }\n\n    let saveDiff = isChildNode(currentNode);\n\n    const { state, stateSaveMode, actionType, label, eventType, meta } = actionFn.apply(\n      currentState,\n      customLabel,\n    );\n\n    const parentId = graph.current;\n\n    const serializedState = serialize(state);\n\n    const diffs = differ(previousState, serializedState) || [];\n\n    if (saveDiff && Object.keys(previousState).length / 2 < diffs.length) {\n      saveDiff = false;\n    }\n\n    saveDiff = saveDiff && stateSaveMode === 'Diff';\n\n    const newNode = saveDiff\n      ? createNewDiffNode<S, A>(\n          parentId,\n          label,\n          diffs,\n          actionType,\n          previousStateID,\n          eventType,\n          meta,\n        )\n      : createNewStateNode<S, A>(parentId, serializedState, label, actionType, eventType, meta);\n\n    graph.nodes[newNode.id] = newNode;\n    graph.nodes[currentId].children.push(newNode.id);\n    graph.current = newNode.id;\n\n    return graph.nodes[graph.current];\n    // End\n  },\n);\n\nexport const importState = action(\n  <S, A>(graph: ProvenanceGraph<S, A>, importedState: JsonValue) => {\n    const newNode = createNewStateNode(\n      graph.current,\n      importedState,\n      'Import',\n      'Regular',\n      (null as unknown) as S,\n      {},\n    );\n\n    graph.nodes[newNode.id] = newNode;\n    graph.current = newNode.id;\n  },\n);\n","import { diff } from 'deep-diff';\n\nexport default function differ<T>(obj1: T, obj2: T) {\n  return diff(obj1, obj2);\n}\n","import { compressToEncodedURIComponent, decompressFromEncodedURIComponent } from 'lz-string';\nimport { action, computed, configure, makeAutoObservable, reaction, toJS } from 'mobx';\nimport { ProvenanceGraph } from '..';\nimport { ApplyObject } from '../Types/Action';\nimport { getState, isChildNode, ProvenanceNode, RootNode } from '../Types/Nodes';\nimport { GlobalObserver } from '../Types/Observers';\nimport { Provenance, ProvenanceOpts } from '../Types/Provenance';\nimport { JsonValue, Serializer } from '../Types/Serializers';\nimport defaultDeserializer from '../Utils/defaultDeserializer';\nimport defaultSerializer from '../Utils/defaultSerializer';\nimport generateTimeStamp from '../Utils/generateTimeStamp';\nimport { NodeID } from './../Types/Nodes';\nimport { ChangeType, ObserverEffect, ObserverExpression } from './../Types/Observers';\nimport {\n  applyActionFunction,\n  createProvenanceGraph,\n  goToNode,\n  importState,\n} from './ProvenanceGraphFunction';\n\nconfigure({\n  enforceActions: 'always',\n  isolateGlobalState: true,\n});\n\nconst PROVSTATEKEY = 'provState';\n\nfunction createStore<T, S, A>(initState: T, serializer: Serializer<T>) {\n  const obs = makeAutoObservable(createProvenanceGraph<S, A>(serializer(initState)));\n  return obs;\n}\n\n/**\n * @template T Represents the given state of an application as defined in initProvenance.\n * @template S Represents the given event types in your application.\n * Event types are used to differentiate between different actions that create nodes.\n * @template A Represents the given \"extra\" type for storing metadata.\n * Extra is a way to store customized metadata.\n * @param initialState: Initial state for the provenance graph to be created in.\n *  State of the root node.\n * @param _opts: Specify whether or not to loadFromUrl, or utilize firebase integration.\n */\nexport default function initProvenance<T, S, A = void>(\n  initialState: T,\n  _opts: Partial<ProvenanceOpts<T>> = {},\n): Provenance<T, S, A> {\n  const opts: ProvenanceOpts<T> = {\n    loadFromUrl: false,\n    firebaseConfig: null,\n    _serializer: undefined,\n    _deserializer: undefined,\n    ..._opts,\n  };\n\n  let setupFinished = false;\n\n  const { loadFromUrl, _serializer, _deserializer } = opts;\n\n  const serializer = _serializer !== undefined ? _serializer : defaultSerializer;\n\n  const deserializer = _deserializer !== undefined ? _deserializer : defaultDeserializer;\n\n  const graph = createStore<T, S, A>(initialState, serializer);\n\n  const state = computed(() => deserializer(getState(graph, graph.nodes[graph.current])));\n\n  if (loadFromUrl)\n    reaction(\n      () => state.get(),\n      (state) => {\n        const url = new URL(window.location.href);\n        const params = new URLSearchParams(url.search);\n        const stateEncodedString = compressToEncodedURIComponent(JSON.stringify(serializer(state)));\n        params.set(PROVSTATEKEY, stateEncodedString);\n        window.history.replaceState({}, '', `${url.pathname}?${params}`);\n      },\n    );\n\n  return {\n    get state() {\n      return state.get();\n    },\n    get config() {\n      return opts;\n    },\n    get graph() {\n      return graph;\n    },\n    get current() {\n      return graph.nodes[graph.current];\n    },\n    get root() {\n      return graph.nodes[graph.root] as RootNode<S>;\n    },\n    get usingDefaultSerializer() {\n      return _serializer === undefined && _deserializer === undefined;\n    },\n    apply(action: ApplyObject<T, S>, label?: string) {\n      if (!setupFinished)\n        throw new Error(\n          'Provenance setup not finished. Please call done function on provenance object after setting up any observers.)',\n        );\n\n      applyActionFunction(graph, action, state.get(), serializer, label);\n      // ! Add firebase\n    },\n    addGlobalObserver(observer: GlobalObserver<S, A>) {\n      reaction(\n        () => toJS(graph),\n        (currentGraph, previousGraph) => {\n          let change: ChangeType = 'Any';\n          if (Object.keys(currentGraph.nodes).length > Object.keys(previousGraph.nodes).length)\n            change = 'NodeAdded';\n          else if (currentGraph.current !== previousGraph.current) change = 'CurrentChanged';\n\n          observer(currentGraph, change);\n        },\n      );\n    },\n    addObserver<P>(expression: ObserverExpression<T, P>, effect: ObserverEffect<P>) {\n      reaction(\n        () => expression(state.get()),\n        (current, previous) => effect(current, previous),\n      );\n    },\n    goToNode(id: NodeID) {\n      goToNode(graph, id);\n    },\n    addArtifact: action('Add Artifact Action', (artifact: A, _id?: NodeID) => {\n      let id = graph.current;\n      if (_id) id = _id;\n\n      const node = graph.nodes[id];\n\n      if (isChildNode(node)) {\n        node.artifacts.customArtifacts.push({\n          timestamp: generateTimeStamp(),\n          artifact,\n        });\n      }\n    }),\n    addAnnotation: action('Add Annotation Action', (annotation: string, _id?: NodeID) => {\n      let id = graph.current;\n      if (_id) id = _id;\n\n      const node = graph.nodes[id];\n\n      if (isChildNode(node)) {\n        node.artifacts.annotations.push({\n          timestamp: generateTimeStamp(),\n          annotation,\n        });\n      }\n    }),\n    getAllArtifacts(_id?: NodeID) {\n      let id = graph.current;\n      if (_id) id = _id;\n      const node = graph.nodes[id];\n\n      if (isChildNode(node)) {\n        return toJS(node.artifacts.customArtifacts);\n      }\n      return [];\n    },\n    getLatestArtifact(_id?: NodeID) {\n      let id = graph.current;\n      if (_id) id = _id;\n      const node = graph.nodes[id];\n\n      if (isChildNode(node)) {\n        const arts = node.artifacts.customArtifacts;\n        return toJS(arts[arts.length - 1]);\n      }\n      return null;\n    },\n    getAllAnnotation(_id?: NodeID) {\n      let id = graph.current;\n      if (_id) id = _id;\n      const node = graph.nodes[id];\n\n      if (isChildNode(node)) {\n        return toJS(node.artifacts.annotations);\n      }\n      return [];\n    },\n    getLatestAnnotation(_id?: NodeID) {\n      let id = graph.current;\n      if (_id) id = _id;\n      const node = graph.nodes[id];\n\n      if (isChildNode(node)) {\n        const { annotations } = node.artifacts;\n        return toJS(annotations[annotations.length - 1]);\n      }\n      return null;\n    },\n    undo() {\n      const current = this.current;\n      if (!isChildNode(current)) console.warn('Already at Root');\n      else goToNode(graph, current.parent);\n    },\n    redo(to: 'latest' | 'oldest' = 'latest') {\n      const current = this.current;\n\n      if (current.children.length === 0) {\n        console.warn('Already at latest node in this branch.');\n      } else {\n        let id = current.children[current.children.length - 1];\n        if (to === 'oldest') id = current.children[0];\n\n        goToNode(graph, id);\n      }\n    },\n    goBackOneStep() {\n      this.undo();\n    },\n    goForwardOneStep(to: 'latest' | 'oldest' = 'latest') {\n      this.redo(to);\n    },\n    undoNonEphemeral() {\n      this.goBackToNonEphemeral();\n    },\n    goBackToNonEphemeral() {\n      let parent: NodeID | null = null;\n      const current = graph.nodes[graph.current];\n      if (isChildNode(current)) {\n        parent = current.parent;\n\n        while (graph.nodes[parent].actionType === 'Ephemeral') {\n          const parentNode: ProvenanceNode<S, A> = graph.nodes[parent];\n          if (!isChildNode(parentNode)) break;\n          parent = parentNode.parent;\n        }\n\n        goToNode(graph, parent);\n      }\n    },\n    redoNonEphemeral(to: 'latest' | 'oldest' = 'latest') {\n      this.goForwardToNonEphemeral(to);\n    },\n    goForwardToNonEphemeral(to: 'latest' | 'oldest' = 'latest') {\n      let child: NodeID | null = null;\n      const current = graph.nodes[graph.current];\n\n      if (current.children.length === 0) {\n        throw new Error('Already at latest node.');\n      }\n      child = current.children[to === 'latest' ? current.children.length - 1 : 0];\n\n      while (graph.nodes[child].actionType === 'Ephemeral') {\n        const childNode: ProvenanceNode<S, A> = graph.nodes[child];\n        if (childNode.children.length === 0) break;\n        child = childNode.children[to === 'latest' ? childNode.children.length - 1 : 0];\n      }\n\n      goToNode(graph, child);\n    },\n    reset() {\n      goToNode(graph, graph.root);\n    },\n    setBookmark: action('Bookmark Action', (id: NodeID, bookmark: boolean) => {\n      graph.nodes[id].bookmarked = bookmark;\n    }),\n    getBookmark(id: NodeID) {\n      return graph.nodes[id].bookmarked;\n    },\n    getAllBookmarks() {\n      return Object.entries(graph.nodes)\n        .filter((entry) => entry[1].bookmarked)\n        .map((d) => d[0] as NodeID);\n    },\n    exportState(partial = false) {\n      let exportedState: JsonValue = {};\n\n      const currentState = getState(graph, this.current);\n\n      const initState = serializer(initialState);\n\n      if (partial) {\n        Object.keys(initState).forEach((k) => {\n          const prev = initState[k];\n          const curr = currentState[k];\n          if (JSON.stringify(prev) !== JSON.stringify(curr)) {\n            exportedState = { ...exportedState, [k]: currentState[k] };\n          }\n        });\n      } else {\n        exportedState = currentState;\n      }\n\n      const compressedString = compressToEncodedURIComponent(JSON.stringify(exportedState));\n\n      return compressedString;\n    },\n    importState(s: string | JsonValue) {\n      let state: JsonValue;\n      if (typeof s === 'string') {\n        state = JSON.parse(decompressFromEncodedURIComponent(s) || '{}');\n      } else {\n        state = { ...this.state, ...s };\n      }\n\n      importState(graph, state);\n    },\n    exportProvenanceGraph() {\n      return JSON.stringify(toJS(graph));\n    },\n    importProvenanceGraph: action(\n      'Import Provenance Graph',\n      (g: string | ProvenanceGraph<S, A>) => {\n        let importedGraph: ProvenanceGraph<S, A>;\n        if (typeof g === 'string') importedGraph = JSON.parse(g);\n        else importedGraph = g;\n\n        graph.current = importedGraph.current;\n        graph.root = importedGraph.root;\n        graph.nodes = importedGraph.nodes;\n      },\n    ),\n    getState(node: ProvenanceNode<S, A> | NodeID) {\n      let n: ProvenanceNode<S, A>;\n      if (typeof node === 'string') {\n        n = graph.nodes[node];\n      } else {\n        n = node;\n      }\n\n      return deserializer(getState(graph, n));\n    },\n    done() {\n      setupFinished = true;\n      if (loadFromUrl) {\n        if (!window?.location?.href)\n          throw new Error('loadFromUrl option can only be used in a browser environment');\n\n        const url = new URL(window.location.href);\n        const params = new URLSearchParams(url.search);\n        const importString = params.get(PROVSTATEKEY);\n        if (!importString) return;\n\n        this.importState(importString);\n      }\n    },\n  };\n}\n","/* eslint-disable func-names */\n/* eslint-disable no-underscore-dangle */\nimport { action, toJS } from 'mobx';\nimport { ActionFunction, ActionObject, ActionSaveStateMode, ActionType } from '../Types/Action';\nimport { Meta } from '../Types/Nodes';\n\n/**\n *\n * @template T State of the application\n * @template S Represents the given event types in your application.\n * Event types are used to differentiate between different actions that create nodes.\n *\n * @param func Defines the function which will be executed on provenance apply\n *\n */\n\n// TODO:: Switch Args and S here.\nexport default function createAction<T, Args extends unknown[] = unknown[], S = void>(\n  func: ActionFunction<T, Args>,\n): ActionObject<T, S, Args> {\n  let _label: string | undefined;\n  let _actionType: ActionType = 'Regular';\n  let _stateSaveMode: ActionSaveStateMode = 'Diff';\n  let _eventType: S;\n  let _meta: Meta = {};\n\n  const actionObject: ActionObject<T, S, Args> = (...args: Args) => {\n    return {\n      apply: action((state: T, label?: string) => {\n        if (!_label) throw new Error('Please specify a default label when you create the action');\n\n        if (!label) label = _label;\n\n        func(state, ...args);\n        return {\n          state: toJS(state),\n          label: label,\n          stateSaveMode: _stateSaveMode,\n          actionType: _actionType,\n          eventType: _eventType,\n          meta: _meta,\n        };\n      }),\n    };\n  };\n\n  actionObject.setLabel = function (label: string) {\n    _label = label;\n    return this;\n  };\n\n  actionObject.setActionType = function (actionType: ActionType) {\n    _actionType = actionType;\n    return this;\n  };\n\n  actionObject.saveStateMode = function (mode: ActionSaveStateMode) {\n    _stateSaveMode = mode;\n    return this;\n  };\n\n  actionObject.setEventType = function (evtType: S) {\n    _eventType = evtType;\n    return this;\n  };\n\n  actionObject.setMetaData = function (m: Meta) {\n    _meta = m;\n    return this;\n  };\n\n  return actionObject;\n}\n"],"names":["isStateNode","node","isChildNode","getState","graph","label","isRootNode","toJS","state","_state","nodes","lastStateNode","JSON","parse","stringify","diffs","forEach","diff","applyChange","defaultDeserializer","o","str","_","val","type","Set","arr","Map","Object","entries","obj","defaultSerializer","Array","from","fromEntries","generateTimeStamp","Date","getTime","generateUUID","d","valueOf","replace","c","r","Math","random","floor","toString","createNewStateNode","parent","actionType","eventType","meta","id","metadata","createdOn","artifacts","annotations","customArtifacts","children","bookmarked","goToNode","action","newCurrentNode","Error","current","applyActionFunction","_graph","actionFn","currentState","serialize","customLabel","currentId","currentNode","previousState","previousStateID","saveDiff","apply","stateSaveMode","parentId","serializedState","keys","length","newNode","previousStateId","createNewDiffNode","push","importState","importedState","configure","enforceActions","isolateGlobalState","func","_label","_eventType","_actionType","_stateSaveMode","_meta","actionObject","args","setLabel","this","setActionType","saveStateMode","mode","setEventType","evtType","setMetaData","m","initialState","_opts","opts","loadFromUrl","firebaseConfig","_serializer","undefined","_deserializer","setupFinished","serializer","deserializer","initState","root","makeAutoObservable","createStore","computed","reaction","get","url","URL","window","location","href","params","URLSearchParams","search","stateEncodedString","compressToEncodedURIComponent","set","history","replaceState","pathname","addGlobalObserver","observer","currentGraph","previousGraph","change","addObserver","expression","effect","previous","addArtifact","artifact","_id","timestamp","addAnnotation","annotation","getAllArtifacts","getLatestArtifact","arts","getAllAnnotation","getLatestAnnotation","undo","console","warn","redo","to","goBackOneStep","goForwardOneStep","undoNonEphemeral","goBackToNonEphemeral","parentNode","redoNonEphemeral","goForwardToNonEphemeral","child","childNode","reset","setBookmark","bookmark","getBookmark","getAllBookmarks","filter","entry","map","exportState","partial","exportedState","k","curr","s","decompressFromEncodedURIComponent","exportProvenanceGraph","importProvenanceGraph","g","importedGraph","done","_window","_window$location","importString"],"mappings":"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"}