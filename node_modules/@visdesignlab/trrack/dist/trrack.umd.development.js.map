{"version":3,"file":"trrack.umd.development.js","sources":["../src/Utils/DeepCopy.ts","../src/Types/Nodes.ts","../src/Utils/defaultDeserializer.ts","../src/Utils/defaultSerializer.ts","../src/Utils/generateTimeStamp.ts","../src/Utils/Differ.ts","../src/Utils/generateUUID.ts","../src/Provenance/ProvenanceGraphFunction.ts","../src/Provenance/ProvenanceCreator.ts","../src/Provenance/ActionCreator.ts"],"sourcesContent":["/* eslint-disable no-shadow */\n// TODO:: Fix typing, target shouldnt be of type T.\n\n// eslint-disable-next-line no-unused-vars\nexport default function deepCopy<T>(target: T): T {\n  return JSON.parse(JSON.stringify(target));\n}\n","/* eslint-disable no-shadow */\nimport { applyChange, Diff } from 'deep-diff';\nimport { toJS } from 'mobx';\nimport deepCopy from '../Utils/DeepCopy';\nimport { ActionType } from './Action';\nimport { ProvenanceGraph } from './ProvenanceGraph';\nimport { JsonValue } from './Serializers';\n\nexport type DiffExport<L, R = L> = Diff<L, R>;\n\nexport type NodeID = string;\n\nexport type Meta = { [key: string]: any };\n\nexport type NodeMetadata<S> = {\n  createdOn?: number;\n  eventType: S | 'Root';\n} & Meta;\n\ntype BaseArtifact = {\n  timestamp: number;\n};\n\nexport type Annotation = BaseArtifact & {\n  annotation: string;\n};\n\nexport type Artifact<A> = BaseArtifact & {\n  artifact: A;\n};\n\nexport type Artifacts<A> = {\n  annotations: Annotation[];\n  customArtifacts: Artifact<A>[];\n};\n\nexport interface BaseNode<S> {\n  id: NodeID;\n  label: string;\n  metadata: NodeMetadata<S>;\n  children: NodeID[];\n  actionType: ActionType;\n  bookmarked: boolean;\n}\n\nexport interface RootNode<S> extends BaseNode<S> {\n  state: JsonValue;\n}\n\nexport interface ChildNode<S, A> extends BaseNode<S> {\n  parent: NodeID;\n  artifacts: Artifacts<A>;\n}\n\nexport interface StateNode<S, A> extends RootNode<S>, ChildNode<S, A> {}\n\nexport interface DiffNode<S, A> extends ChildNode<S, A> {\n  diffs: Diff<JsonValue>[];\n  lastStateNode: NodeID;\n}\n\nexport type ProvenanceNode<S, A> = RootNode<S> | StateNode<S, A> | DiffNode<S, A>;\n\nexport type Nodes<S, A> = { [key: string]: ProvenanceNode<S, A> };\n\nexport type CurrentNode<S, A> = ProvenanceNode<S, A>;\n\n/**\n * Function for checking if a node is a state node.\n * @template T Represents the given state of an application as defined in initProvenance.\n * @template S Represents the given event types in your application.\n * Event types are used to differentiate between different actions that create nodes.\n * @template A Represents the given \"extra\" type for storing metadata.\n * Extra is a way to store customized metadata.\n * @param _opts: Given node to check if it is a state node.\n */\nexport function isStateNode<S, A>(node: ProvenanceNode<S, A>): node is StateNode<S, A> {\n  return 'parent' in node && 'state' in node;\n}\n\n/**\n * Function for checking if a node is a diff node.\n * @template T Represents the given state of an application as defined in initProvenance.\n * @template S Represents the given event types in your application.\n * Event types are used to differentiate between different actions that create nodes.\n * @template A Represents the given \"extra\" type for storing metadata.\n * Extra is a way to store customized metadata.\n * @param _opts: Given node to check if it is a diff node.\n */\nexport function isDiffNode<S, A>(node: ProvenanceNode<S, A>): node is DiffNode<S, A> {\n  return 'diffs' in node;\n}\n\n/**\n * Function for checking if a node is a child node.\n * @template T Represents the given state of an application as defined in initProvenance.\n * @template S Represents the given event types in your application.\n * Event types are used to differentiate between different actions that create nodes.\n * @template A Represents the given \"extra\" type for storing metadata.\n *  Extra is a way to store customized metadata.\n * @param _opts: Given node to check if it is a child node.\n */\nexport function isChildNode<S, A>(\n  node: ProvenanceNode<S, A>,\n): node is DiffNode<S, A> | StateNode<S, A> {\n  return 'parent' in node;\n}\n\n/**\n * Function for checking if a node is the root node.\n * @template T Represents the given state of an application as defined in initProvenance.\n * @template S Represents the given event types in your application.\n * Event types are used to differentiate between different actions that create nodes.\n * @template A Represents the given \"extra\" type for storing metadata.\n * Extra is a way to store customized metadata.\n * @param _opts: Given node to check if it is root.\n */\nexport function isRootNode<S, A>(node: ProvenanceNode<S, A>): node is RootNode<S> {\n  return node.label === 'Root';\n}\n\n/**\n`* Retrieve the state of a node. `\n * @template T Represents the given state of an application as defined in initProvenance.\n * @template S Represents the given event types in your application.\n * Event types are used to differentiate between different actions that create nodes.\n * @template A Represents the given \"extra\" type for storing metadata.\n * Extra is a way to store customized metadata.\n * @param graph: Provenance Graph which we are searching for node in\n * @param _opts: Node which we want the state of\n */\nexport function getState<S, A>(\n  graph: ProvenanceGraph<S, A>,\n  node: ProvenanceNode<S, A>,\n): JsonValue {\n  if (isRootNode(node) || isStateNode(node)) {\n    return toJS(node.state);\n  }\n\n  // eslint-disable-next-line no-underscore-dangle\n  const _state = toJS((graph.nodes[node.lastStateNode] as StateNode<S, A>).state);\n\n  const state = deepCopy(_state);\n\n  // what is this for?\n  node.diffs.forEach((diff) => {\n    applyChange(state, null, diff);\n  });\n\n  return state;\n}\n","import { JsonValue } from '../Types/Serializers';\n\nfunction defaultDeserializer<T>(o: JsonValue): T {\n  const str = JSON.stringify(o);\n  const obj = JSON.parse(str, (_, val) => {\n    if (!val) return val;\n\n    if (val.type && val.type === 'Set') {\n      return new Set(val.arr);\n    }\n    if (val.type && val.type === 'Map') {\n      return new Map(Object.entries(val.obj));\n    }\n    return val;\n  });\n\n  return obj;\n}\n\nexport default defaultDeserializer;\n","import { toJS } from 'mobx';\nimport { JsonValue } from '../Types/Serializers';\n\nfunction defaultSerializer<T>(obj: T): JsonValue {\n  if (!obj) return {};\n\n  const str = JSON.stringify(toJS(obj), (_, val) => {\n    if (val instanceof Set) {\n      return {\n        type: 'Set',\n        arr: Array.from(val),\n      };\n    }\n    if (val instanceof Map) {\n      return {\n        type: 'Map',\n        obj: Object.fromEntries(val),\n      };\n    }\n    return val;\n  });\n\n  return JSON.parse(str);\n}\n\nexport default defaultSerializer;\n","export default function generateTimeStamp(): number {\n  return new Date().getTime();\n}\n","import { diff } from 'deep-diff';\n\nexport default function differ<T>(obj1: T, obj2: T) {\n  return diff(obj1, obj2);\n}\n","/* eslint-disable no-bitwise */\nexport default function generateUUID(): string {\n  let d = new Date().getTime();\n\n  d += new Date().valueOf();\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n}\n","/* eslint-disable no-shadow */\nimport { Diff } from 'deep-diff';\nimport { action } from 'mobx';\nimport { ActionType, ApplyObject } from '../Types/Action';\nimport {\n  DiffNode,\n  getState,\n  isChildNode,\n  isDiffNode,\n  Meta,\n  NodeID,\n  RootNode,\n  StateNode,\n} from '../Types/Nodes';\nimport { ProvenanceGraph } from '../Types/ProvenanceGraph';\nimport { JsonValue, Serializer } from '../Types/Serializers';\nimport differ from '../Utils/Differ';\nimport generateTimeStamp from '../Utils/generateTimeStamp';\nimport generateUUID from '../Utils/generateUUID';\n\nexport function createProvenanceGraph<S, A>(state: JsonValue): ProvenanceGraph<S, A> {\n  const root: RootNode<S> = {\n    id: generateUUID(),\n    label: 'Root',\n    metadata: {\n      createdOn: generateTimeStamp(),\n      eventType: 'Root',\n    },\n    children: [],\n    state,\n    actionType: 'Regular',\n    bookmarked: false,\n  };\n\n  const graph: ProvenanceGraph<S, A> = {\n    nodes: {\n      [root.id]: root,\n    },\n    root: root.id,\n    current: root.id,\n  };\n\n  return graph;\n}\n\nfunction createNewStateNode<S, A>(\n  parent: NodeID,\n  state: JsonValue,\n  label: string,\n  actionType: ActionType,\n  eventType: S,\n  meta: Meta,\n): StateNode<S, A> {\n  return {\n    id: generateUUID(),\n    label,\n    metadata: {\n      createdOn: generateTimeStamp(),\n      eventType,\n      ...meta,\n    },\n    artifacts: {\n      annotations: [],\n      customArtifacts: [],\n    },\n    parent,\n    children: [],\n    state,\n    actionType,\n    bookmarked: false,\n  };\n}\n\nfunction createNewDiffNode<S, A>(\n  parent: NodeID,\n  label: string,\n  diffs: Diff<JsonValue>[],\n  actionType: ActionType,\n  previousStateId: NodeID,\n  eventType: S,\n  meta: Meta,\n): DiffNode<S, A> {\n  return {\n    id: generateUUID(),\n    label,\n    metadata: {\n      createdOn: generateTimeStamp(),\n      eventType,\n      ...meta,\n    },\n    artifacts: {\n      annotations: [],\n      customArtifacts: [],\n    },\n    parent,\n    children: [],\n    lastStateNode: previousStateId,\n    diffs,\n    actionType,\n    bookmarked: false,\n  };\n}\n\n// export const updateMobxObservable = action(<T>(oldObject: T, newObject: T) => {\n//   Object.keys(oldObject).forEach((k) => {\n//     const key: Extract<keyof T, string> = k as any;\n//     const oldValue = oldObject[key];\n//     const newValue = newObject[key];\n//     if (newValue !== oldValue) {\n//       let val = newObject[key];\n//       val = (typeof val).toString() === 'object' ? observable(val) : val;\n//       oldObject[key] = val;\n//     }\n//   });\n// });\n\nexport const goToNode = action(<S, A>(graph: ProvenanceGraph<S, A>, id: NodeID) => {\n  const newCurrentNode = graph.nodes[id];\n  if (!newCurrentNode) throw new Error(`Node with id: ${id} does not exist`);\n  graph.current = newCurrentNode.id;\n});\n\nexport const applyActionFunction = action(\n  <T, S, A>(\n    _graph: ProvenanceGraph<S, A>,\n    actionFn: ApplyObject<T, S>,\n    currentState: T,\n    // eslint-disable-next-line no-unused-vars\n    serialize: Serializer<T>,\n    customLabel?: string,\n  ) => {\n    const graph = _graph;\n\n    const { current: currentId } = graph;\n    const currentNode = graph.nodes[currentId];\n    let previousState: JsonValue | null = null;\n    let previousStateID: NodeID | null = null;\n\n    if (isDiffNode(currentNode)) {\n      previousState = getState(graph, graph.nodes[currentNode.lastStateNode]);\n      previousStateID = currentNode.lastStateNode;\n    } else {\n      previousState = getState(graph, currentNode);\n      previousStateID = currentNode.id;\n    }\n\n    let saveDiff = isChildNode(currentNode);\n\n    const { state, stateSaveMode, actionType, label, eventType, meta } = actionFn.apply(\n      currentState,\n      customLabel,\n    );\n\n    const parentId = graph.current;\n\n    const serializedState = serialize(state);\n\n    const diffs = differ(previousState, serializedState) || [];\n\n    if (saveDiff && Object.keys(previousState).length / 2 < diffs.length) {\n      saveDiff = false;\n    }\n\n    saveDiff = saveDiff && stateSaveMode === 'Diff';\n\n    const newNode = saveDiff\n      ? createNewDiffNode<S, A>(\n          parentId,\n          label,\n          diffs,\n          actionType,\n          previousStateID,\n          eventType,\n          meta,\n        )\n      : createNewStateNode<S, A>(parentId, serializedState, label, actionType, eventType, meta);\n\n    graph.nodes[newNode.id] = newNode;\n    graph.nodes[currentId].children.push(newNode.id);\n    graph.current = newNode.id;\n\n    return graph.nodes[graph.current];\n    // End\n  },\n);\n\nexport const importState = action(\n  <S, A>(graph: ProvenanceGraph<S, A>, importedState: JsonValue) => {\n    const newNode = createNewStateNode(\n      graph.current,\n      importedState,\n      'Import',\n      'Regular',\n      (null as unknown) as S,\n      {},\n    );\n\n    graph.nodes[newNode.id] = newNode;\n    graph.current = newNode.id;\n  },\n);\n","import { compressToEncodedURIComponent, decompressFromEncodedURIComponent } from 'lz-string';\nimport { action, computed, configure, makeAutoObservable, reaction, toJS } from 'mobx';\nimport { ProvenanceGraph } from '..';\nimport { ApplyObject } from '../Types/Action';\nimport { getState, isChildNode, ProvenanceNode, RootNode } from '../Types/Nodes';\nimport { GlobalObserver } from '../Types/Observers';\nimport { Provenance, ProvenanceOpts } from '../Types/Provenance';\nimport { JsonValue, Serializer } from '../Types/Serializers';\nimport defaultDeserializer from '../Utils/defaultDeserializer';\nimport defaultSerializer from '../Utils/defaultSerializer';\nimport generateTimeStamp from '../Utils/generateTimeStamp';\nimport { NodeID } from './../Types/Nodes';\nimport { ChangeType, ObserverEffect, ObserverExpression } from './../Types/Observers';\nimport {\n  applyActionFunction,\n  createProvenanceGraph,\n  goToNode,\n  importState,\n} from './ProvenanceGraphFunction';\n\nconfigure({\n  enforceActions: 'always',\n  isolateGlobalState: true,\n});\n\nconst PROVSTATEKEY = 'provState';\n\nfunction createStore<T, S, A>(initState: T, serializer: Serializer<T>) {\n  const obs = makeAutoObservable(createProvenanceGraph<S, A>(serializer(initState)));\n  return obs;\n}\n\n/**\n * @template T Represents the given state of an application as defined in initProvenance.\n * @template S Represents the given event types in your application.\n * Event types are used to differentiate between different actions that create nodes.\n * @template A Represents the given \"extra\" type for storing metadata.\n * Extra is a way to store customized metadata.\n * @param initialState: Initial state for the provenance graph to be created in.\n *  State of the root node.\n * @param _opts: Specify whether or not to loadFromUrl, or utilize firebase integration.\n */\nexport default function initProvenance<T, S, A = void>(\n  initialState: T,\n  _opts: Partial<ProvenanceOpts<T>> = {},\n): Provenance<T, S, A> {\n  const opts: ProvenanceOpts<T> = {\n    loadFromUrl: false,\n    firebaseConfig: null,\n    _serializer: undefined,\n    _deserializer: undefined,\n    ..._opts,\n  };\n\n  let setupFinished = false;\n\n  const { loadFromUrl, _serializer, _deserializer } = opts;\n\n  const serializer = _serializer !== undefined ? _serializer : defaultSerializer;\n\n  const deserializer = _deserializer !== undefined ? _deserializer : defaultDeserializer;\n\n  const graph = createStore<T, S, A>(initialState, serializer);\n\n  const state = computed(() => deserializer(getState(graph, graph.nodes[graph.current])));\n\n  if (loadFromUrl)\n    reaction(\n      () => state.get(),\n      (state) => {\n        const url = new URL(window.location.href);\n        const params = new URLSearchParams(url.search);\n        const stateEncodedString = compressToEncodedURIComponent(JSON.stringify(serializer(state)));\n        params.set(PROVSTATEKEY, stateEncodedString);\n        window.history.replaceState({}, '', `${url.pathname}?${params}`);\n      },\n    );\n\n  return {\n    get state() {\n      return state.get();\n    },\n    get config() {\n      return opts;\n    },\n    get graph() {\n      return graph;\n    },\n    get current() {\n      return graph.nodes[graph.current];\n    },\n    get root() {\n      return graph.nodes[graph.root] as RootNode<S>;\n    },\n    get usingDefaultSerializer() {\n      return _serializer === undefined && _deserializer === undefined;\n    },\n    apply(action: ApplyObject<T, S>, label?: string) {\n      if (!setupFinished)\n        throw new Error(\n          'Provenance setup not finished. Please call done function on provenance object after setting up any observers.)',\n        );\n\n      applyActionFunction(graph, action, state.get(), serializer, label);\n      // ! Add firebase\n    },\n    addGlobalObserver(observer: GlobalObserver<S, A>) {\n      reaction(\n        () => toJS(graph),\n        (currentGraph, previousGraph) => {\n          let change: ChangeType = 'Any';\n          if (Object.keys(currentGraph.nodes).length > Object.keys(previousGraph.nodes).length)\n            change = 'NodeAdded';\n          else if (currentGraph.current !== previousGraph.current) change = 'CurrentChanged';\n\n          observer(currentGraph, change);\n        },\n      );\n    },\n    addObserver<P>(expression: ObserverExpression<T, P>, effect: ObserverEffect<P>) {\n      reaction(\n        () => expression(state.get()),\n        (current, previous) => effect(current, previous),\n      );\n    },\n    goToNode(id: NodeID) {\n      goToNode(graph, id);\n    },\n    addArtifact: action('Add Artifact Action', (artifact: A, _id?: NodeID) => {\n      let id = graph.current;\n      if (_id) id = _id;\n\n      const node = graph.nodes[id];\n\n      if (isChildNode(node)) {\n        node.artifacts.customArtifacts.push({\n          timestamp: generateTimeStamp(),\n          artifact,\n        });\n      }\n    }),\n    addAnnotation: action('Add Annotation Action', (annotation: string, _id?: NodeID) => {\n      let id = graph.current;\n      if (_id) id = _id;\n\n      const node = graph.nodes[id];\n\n      if (isChildNode(node)) {\n        node.artifacts.annotations.push({\n          timestamp: generateTimeStamp(),\n          annotation,\n        });\n      }\n    }),\n    getAllArtifacts(_id?: NodeID) {\n      let id = graph.current;\n      if (_id) id = _id;\n      const node = graph.nodes[id];\n\n      if (isChildNode(node)) {\n        return toJS(node.artifacts.customArtifacts);\n      }\n      return [];\n    },\n    getLatestArtifact(_id?: NodeID) {\n      let id = graph.current;\n      if (_id) id = _id;\n      const node = graph.nodes[id];\n\n      if (isChildNode(node)) {\n        const arts = node.artifacts.customArtifacts;\n        return toJS(arts[arts.length - 1]);\n      }\n      return null;\n    },\n    getAllAnnotation(_id?: NodeID) {\n      let id = graph.current;\n      if (_id) id = _id;\n      const node = graph.nodes[id];\n\n      if (isChildNode(node)) {\n        return toJS(node.artifacts.annotations);\n      }\n      return [];\n    },\n    getLatestAnnotation(_id?: NodeID) {\n      let id = graph.current;\n      if (_id) id = _id;\n      const node = graph.nodes[id];\n\n      if (isChildNode(node)) {\n        const { annotations } = node.artifacts;\n        return toJS(annotations[annotations.length - 1]);\n      }\n      return null;\n    },\n    undo() {\n      const current = this.current;\n      if (!isChildNode(current)) console.warn('Already at Root');\n      else goToNode(graph, current.parent);\n    },\n    redo(to: 'latest' | 'oldest' = 'latest') {\n      const current = this.current;\n\n      if (current.children.length === 0) {\n        console.warn('Already at latest node in this branch.');\n      } else {\n        let id = current.children[current.children.length - 1];\n        if (to === 'oldest') id = current.children[0];\n\n        goToNode(graph, id);\n      }\n    },\n    goBackOneStep() {\n      this.undo();\n    },\n    goForwardOneStep(to: 'latest' | 'oldest' = 'latest') {\n      this.redo(to);\n    },\n    undoNonEphemeral() {\n      this.goBackToNonEphemeral();\n    },\n    goBackToNonEphemeral() {\n      let parent: NodeID | null = null;\n      const current = graph.nodes[graph.current];\n      if (isChildNode(current)) {\n        parent = current.parent;\n\n        while (graph.nodes[parent].actionType === 'Ephemeral') {\n          const parentNode: ProvenanceNode<S, A> = graph.nodes[parent];\n          if (!isChildNode(parentNode)) break;\n          parent = parentNode.parent;\n        }\n\n        goToNode(graph, parent);\n      }\n    },\n    redoNonEphemeral(to: 'latest' | 'oldest' = 'latest') {\n      this.goForwardToNonEphemeral(to);\n    },\n    goForwardToNonEphemeral(to: 'latest' | 'oldest' = 'latest') {\n      let child: NodeID | null = null;\n      const current = graph.nodes[graph.current];\n\n      if (current.children.length === 0) {\n        throw new Error('Already at latest node.');\n      }\n      child = current.children[to === 'latest' ? current.children.length - 1 : 0];\n\n      while (graph.nodes[child].actionType === 'Ephemeral') {\n        const childNode: ProvenanceNode<S, A> = graph.nodes[child];\n        if (childNode.children.length === 0) break;\n        child = childNode.children[to === 'latest' ? childNode.children.length - 1 : 0];\n      }\n\n      goToNode(graph, child);\n    },\n    reset() {\n      goToNode(graph, graph.root);\n    },\n    setBookmark: action('Bookmark Action', (id: NodeID, bookmark: boolean) => {\n      graph.nodes[id].bookmarked = bookmark;\n    }),\n    getBookmark(id: NodeID) {\n      return graph.nodes[id].bookmarked;\n    },\n    getAllBookmarks() {\n      return Object.entries(graph.nodes)\n        .filter((entry) => entry[1].bookmarked)\n        .map((d) => d[0] as NodeID);\n    },\n    exportState(partial = false) {\n      let exportedState: JsonValue = {};\n\n      const currentState = getState(graph, this.current);\n\n      const initState = serializer(initialState);\n\n      if (partial) {\n        Object.keys(initState).forEach((k) => {\n          const prev = initState[k];\n          const curr = currentState[k];\n          if (JSON.stringify(prev) !== JSON.stringify(curr)) {\n            exportedState = { ...exportedState, [k]: currentState[k] };\n          }\n        });\n      } else {\n        exportedState = currentState;\n      }\n\n      const compressedString = compressToEncodedURIComponent(JSON.stringify(exportedState));\n\n      return compressedString;\n    },\n    importState(s: string | JsonValue) {\n      let state: JsonValue;\n      if (typeof s === 'string') {\n        state = JSON.parse(decompressFromEncodedURIComponent(s) || '{}');\n      } else {\n        state = { ...this.state, ...s };\n      }\n\n      importState(graph, state);\n    },\n    exportProvenanceGraph() {\n      return JSON.stringify(toJS(graph));\n    },\n    importProvenanceGraph: action(\n      'Import Provenance Graph',\n      (g: string | ProvenanceGraph<S, A>) => {\n        let importedGraph: ProvenanceGraph<S, A>;\n        if (typeof g === 'string') importedGraph = JSON.parse(g);\n        else importedGraph = g;\n\n        graph.current = importedGraph.current;\n        graph.root = importedGraph.root;\n        graph.nodes = importedGraph.nodes;\n      },\n    ),\n    getState(node: ProvenanceNode<S, A> | NodeID) {\n      let n: ProvenanceNode<S, A>;\n      if (typeof node === 'string') {\n        n = graph.nodes[node];\n      } else {\n        n = node;\n      }\n\n      return deserializer(getState(graph, n));\n    },\n    done() {\n      setupFinished = true;\n      if (loadFromUrl) {\n        if (!window?.location?.href)\n          throw new Error('loadFromUrl option can only be used in a browser environment');\n\n        const url = new URL(window.location.href);\n        const params = new URLSearchParams(url.search);\n        const importString = params.get(PROVSTATEKEY);\n        if (!importString) return;\n\n        this.importState(importString);\n      }\n    },\n  };\n}\n","/* eslint-disable func-names */\n/* eslint-disable no-underscore-dangle */\nimport { action, toJS } from 'mobx';\nimport { ActionFunction, ActionObject, ActionSaveStateMode, ActionType } from '../Types/Action';\nimport { Meta } from '../Types/Nodes';\n\n/**\n *\n * @template T State of the application\n * @template S Represents the given event types in your application.\n * Event types are used to differentiate between different actions that create nodes.\n *\n * @param func Defines the function which will be executed on provenance apply\n *\n */\n\n// TODO:: Switch Args and S here.\nexport default function createAction<T, Args extends unknown[] = unknown[], S = void>(\n  func: ActionFunction<T, Args>,\n): ActionObject<T, S, Args> {\n  let _label: string | undefined;\n  let _actionType: ActionType = 'Regular';\n  let _stateSaveMode: ActionSaveStateMode = 'Diff';\n  let _eventType: S;\n  let _meta: Meta = {};\n\n  const actionObject: ActionObject<T, S, Args> = (...args: Args) => {\n    return {\n      apply: action((state: T, label?: string) => {\n        if (!_label) throw new Error('Please specify a default label when you create the action');\n\n        if (!label) label = _label;\n\n        func(state, ...args);\n        return {\n          state: toJS(state),\n          label: label,\n          stateSaveMode: _stateSaveMode,\n          actionType: _actionType,\n          eventType: _eventType,\n          meta: _meta,\n        };\n      }),\n    };\n  };\n\n  actionObject.setLabel = function (label: string) {\n    _label = label;\n    return this;\n  };\n\n  actionObject.setActionType = function (actionType: ActionType) {\n    _actionType = actionType;\n    return this;\n  };\n\n  actionObject.saveStateMode = function (mode: ActionSaveStateMode) {\n    _stateSaveMode = mode;\n    return this;\n  };\n\n  actionObject.setEventType = function (evtType: S) {\n    _eventType = evtType;\n    return this;\n  };\n\n  actionObject.setMetaData = function (m: Meta) {\n    _meta = m;\n    return this;\n  };\n\n  return actionObject;\n}\n"],"names":["deepCopy","target","JSON","parse","stringify","isStateNode","node","isDiffNode","isChildNode","isRootNode","label","getState","graph","toJS","state","_state","nodes","lastStateNode","diffs","forEach","diff","applyChange","defaultDeserializer","o","str","obj","_","val","type","Set","arr","Map","Object","entries","defaultSerializer","Array","from","fromEntries","generateTimeStamp","Date","getTime","differ","obj1","obj2","generateUUID","d","valueOf","replace","c","r","Math","random","floor","toString","createProvenanceGraph","root","id","metadata","createdOn","eventType","children","actionType","bookmarked","current","createNewStateNode","parent","meta","artifacts","annotations","customArtifacts","createNewDiffNode","previousStateId","goToNode","action","newCurrentNode","Error","applyActionFunction","_graph","actionFn","currentState","serialize","customLabel","currentId","currentNode","previousState","previousStateID","saveDiff","apply","stateSaveMode","parentId","serializedState","keys","length","newNode","push","importState","importedState","configure","enforceActions","isolateGlobalState","PROVSTATEKEY","createStore","initState","serializer","obs","makeAutoObservable","initProvenance","initialState","_opts","opts","loadFromUrl","firebaseConfig","_serializer","undefined","_deserializer","setupFinished","deserializer","computed","reaction","get","url","URL","window","location","href","params","URLSearchParams","search","stateEncodedString","compressToEncodedURIComponent","set","history","replaceState","pathname","config","usingDefaultSerializer","addGlobalObserver","observer","currentGraph","previousGraph","change","addObserver","expression","effect","previous","addArtifact","artifact","_id","timestamp","addAnnotation","annotation","getAllArtifacts","getLatestArtifact","arts","getAllAnnotation","getLatestAnnotation","undo","console","warn","redo","to","goBackOneStep","goForwardOneStep","undoNonEphemeral","goBackToNonEphemeral","parentNode","redoNonEphemeral","goForwardToNonEphemeral","child","childNode","reset","setBookmark","bookmark","getBookmark","getAllBookmarks","filter","entry","map","exportState","partial","exportedState","k","prev","curr","compressedString","s","decompressFromEncodedURIComponent","exportProvenanceGraph","importProvenanceGraph","g","importedGraph","n","done","importString","createAction","func","_label","_actionType","_stateSaveMode","_eventType","_meta","actionObject","args","setLabel","setActionType","saveStateMode","mode","setEventType","evtType","setMetaData","m"],"mappings":"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"}